codeunit 50009 "Layout AL Generator"
{
    Subtype = Normal;

    procedure GenerateFromRule(var LayoutRule: Record PageControlLayout)
    var
        ALProfileText: Text;
        ALCustomizationText: Text;
        FinalALText: Text;
        ActionEnum: Enum "Field Layout Action";
        TempBlob: Codeunit "Temp Blob";
        ALStream: OutStream;
        InStream: InStream;
        ExtensionID: Code[20];
        CustomizationID: Code[20];
        FileName: Text;
        Builder: TextBuilder;
        ActionTextBuilder: TextBuilder;
        FieldNameFormatted: Text;
    begin
        if LayoutRule.Generated then
            exit;

        ActionEnum := LayoutRule.Action;

        // Format field name safely
        if StrPos(LayoutRule."Field Name", ' ') > 0 then
            FieldNameFormatted := '"' + LayoutRule."Field Name" + '"'
        else
            FieldNameFormatted := LayoutRule."Field Name";

        // === Generate Field Layout Block ===
        case ActionEnum of
            ActionEnum::Hide:
                begin
                    ActionTextBuilder.AppendLine('modify(' + FieldNameFormatted + ')');
                    ActionTextBuilder.AppendLine('{');
                    ActionTextBuilder.AppendLine('    Visible = false;');
                    ActionTextBuilder.AppendLine('}');
                end;
            ActionEnum::Show:
                begin
                    ActionTextBuilder.AppendLine('modify(' + FieldNameFormatted + ')');
                    ActionTextBuilder.AppendLine('{');
                    ActionTextBuilder.AppendLine('    Visible = true;');
                    ActionTextBuilder.AppendLine('}');
                end;
            ActionEnum::MoveAfter:
                ActionTextBuilder.AppendLine('moveafter("' + LayoutRule."Reference Field" + '"; ' + FieldNameFormatted + ')');
            ActionEnum::MoveBefore:
                ActionTextBuilder.AppendLine('movebefore("' + LayoutRule."Reference Field" + '"; ' + FieldNameFormatted + ')');
            ActionEnum::AddAfter:
                begin
                    ActionTextBuilder.AppendLine('addafter("' + LayoutRule."Reference Field" + '")');
                    ActionTextBuilder.AppendLine('{');
                    ActionTextBuilder.AppendLine('    field("' + LayoutRule."Field Name" + '"; "' + LayoutRule."Field Name" + '")');
                    ActionTextBuilder.AppendLine('    {');
                    ActionTextBuilder.AppendLine('        ApplicationArea = All;');
                    ActionTextBuilder.AppendLine('    }');
                    ActionTextBuilder.AppendLine('}');
                end;
            ActionEnum::AddBefore:
                begin
                    ActionTextBuilder.AppendLine('addbefore("' + LayoutRule."Reference Field" + '")');
                    ActionTextBuilder.AppendLine('{');
                    ActionTextBuilder.AppendLine('    field("' + LayoutRule."Field Name" + '"; "' + LayoutRule."Field Name" + '")');
                    ActionTextBuilder.AppendLine('    {');
                    ActionTextBuilder.AppendLine('        ApplicationArea = All;');
                    ActionTextBuilder.AppendLine('    }');
                    ActionTextBuilder.AppendLine('}');
                end;
            ActionEnum::LockEditing:
                begin
                    ActionTextBuilder.AppendLine('modify(' + FieldNameFormatted + ')');
                    ActionTextBuilder.AppendLine('{');
                    ActionTextBuilder.AppendLine('    Editable = false;');
                    ActionTextBuilder.AppendLine('}');
                end;
            ActionEnum::UnlockEditing:
                begin
                    ActionTextBuilder.AppendLine('modify(' + FieldNameFormatted + ')');
                    ActionTextBuilder.AppendLine('{');
                    ActionTextBuilder.AppendLine('    Editable = true;');
                    ActionTextBuilder.AppendLine('}');
                end;
            else
                Error('Unsupported layout action: %1', ActionEnum);
        end;

        // === Generate Object IDs ===
        ExtensionID := 'PX' + Format(LayoutRule."Entry No.", 0, 9);
        CustomizationID := 'PC' + Format(LayoutRule."Entry No.", 0, 9);
        LayoutRule."Profile Extension ID" := ExtensionID;
        LayoutRule."Customization ID" := CustomizationID;

        // === Build AL using TextBuilder ===
        Builder.AppendLine('profileextension ' + ExtensionID + ' extends "' + LayoutRule."Profile ID" + '"');
        Builder.AppendLine('{');
        Builder.AppendLine('    ProfileDescription = ''Generated by layout tool'';');
        Builder.AppendLine('    Customizations = ' + CustomizationID + ';');
        Builder.AppendLine('}');
        Builder.AppendLine('');
        Builder.AppendLine('pagecustomization ' + CustomizationID + ' customizes "' + LayoutRule."Page Name" + '"');
        Builder.AppendLine('{');
        Builder.AppendLine('    layout');
        Builder.AppendLine('    {');
        Builder.AppendLine(ActionTextBuilder.ToText());
        Builder.AppendLine('    }');
        Builder.AppendLine('}');

        FinalALText := Builder.ToText();

        // === Save to BLOB and Download ===
        Clear(LayoutRule."Generated AL");
        LayoutRule."Generated AL".CreateOutStream(ALStream);
        ALStream.WriteText(FinalALText);

        LayoutRule."Generated" := true;
        LayoutRule."Generated DateTime" := CurrentDateTime;
        LayoutRule.Modify(true);

        LayoutRule."Generated AL".CreateInStream(InStream);
        FileName := LayoutRule."Profile Extension ID" + '_' + LayoutRule."Customization ID" + '.al';
        DownloadFromStream(InStream, '', '', '', FileName);
    end;
}